/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.springframework.boot' version '3.1.5'
    id 'java'
    id 'base'
    id 'io.spring.dependency-management' version '1.1.3'
}
group = 'com.jasper'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}
configurations {
    jasperreports
    postgresql
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url "https://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts" }
}

dependencies {
    testImplementation 'junit:junit:4.13.2'

    implementation "com.google.guava:guava:30.1.1-jre"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "net.sf.jasperreports:jasperreports:6.20.6"
    jasperreports 'net.sf.jasperreports:jasperreports:6.20.6'
    implementation('org.springframework:spring-context:6.0.11')
    implementation "org.postgresql:postgresql:42.6.0"
    postgresql "org.postgresql:postgresql:42.6.0"
    implementation "org.springframework.boot:spring-boot-starter-jdbc"
    implementation "com.zaxxer:HikariCP:5.0.1"
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:3.1.5")
    implementation "org.eclipse.jdt.core.compiler:ecj:4.6.1" //org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException
    implementation "com.lowagie:itext:4.2.1"
}

application {
    // Define the main class for the application.
    mainClass = 'com.jasper.main.JasperApplication'
}

//task compileJrxml {
//    print(buildDir)
//    doLast {
//        fileTree('src/main/resources/report').matching {
//            print("hello...!")
//            include '**/*.jrxml'
//        }.each { file ->
//            print("hello2...!")
//            print(file)
//            ant.taskdef(name: 'jasper', classname: 'net.sf.jasperreports.ant.JRAntCompileTask', classpath: configurations.jasperreports.asPath) //classpath: sourceSets.main.runtimeClasspath.asPath
//            ant.jasper(srcdir: file.parent, destdir: "${buildDir}/jasper", tempdir: "${buildDir}/jasper-temp", file: file.name)
//        }
//    }
//}

task compileReports {
    def jasperSourceDir = file('src/main/resources/report')
    def jasperTargetDir = file('src/main/resources/reports-jasper')
    def tempTargetDir = file("${projectDir}/temp")
    ant {
        ant.mkdir(dir: tempTargetDir)
        ant.delete(dir: jasperTargetDir)
        ant.mkdir(dir: jasperTargetDir)
        mkdir(dir: "${jasperSourceDir}/report/assets")
        taskdef(name: 'jrc', classname: 'net.sf.jasperreports.ant.JRAntCompileTask', classpath: configurations.jasperreports.asPath + ':' + configurations.postgresql.asPath)
        //jasperTargetDir.mkdirs()
        jrc(srcdir: jasperSourceDir, destdir: jasperTargetDir, tempdir:tempTargetDir, keepjava: true, xmlvalidation: true) {
            classpath(path: "${buildDir}/jasper")
            include(name: '**/*.jrxml')
        }
        print "Deleting temp directory"
        ant.delete(dir: tempTargetDir)
    }
}

//compileJava.dependsOn compileReports